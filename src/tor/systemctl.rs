use std::error::Error;
use std::process::Command;

pub fn restart_or_start_tor() -> Result<(), Box<dyn Error>> {
    let status = Command::new("systemctl")
        .arg("is-active")
        .arg("tor")
        .output()?;

    let output = String::from_utf8_lossy(&status.stdout);

    if output.trim() == "active" {
        println!("üîÑ Tor –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...");
        let result = Command::new("sudo")
            .arg("systemctl")
            .arg("restart")
            .arg("tor")
            .status()?;
        if !result.success() {
            return Err("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Tor".into());
        }
        println!("‚úÖ Tor –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω");
    } else {
        println!("‚ö†Ô∏è Tor –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å...");
        let result = Command::new("sudo")
            .arg("systemctl")
            .arg("start")
            .arg("tor")
            .status()?;
        if !result.success() {
            return Err("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Tor".into());
        }
        println!("‚úÖ Tor –∑–∞–ø—É—â–µ–Ω");
    }

    Ok(())
}
